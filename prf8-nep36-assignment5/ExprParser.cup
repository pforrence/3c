import java_cup.runtime.*;
import java.util.*;
import java.lang.*;
import visitor.*;
import syntaxtree.*;
import syntaxtree.IntegerLiteral;

/* Preliminaries to use the scanner.  */
scan with {: 
	return lexer.next_token(); 
:};

parser code {: 

  ExprLex lexer;
  public java_cup.runtime.Symbol currentSymbol;

  public ExprParser(ExprLex lex) {
      super(lex);
      lexer = lex;
  }
    public void syntax_error(Symbol currentToken) {
      System.err.println("Error at line " + currentToken.left + ", column " + cur_token.right);
    }

    public int getLine() {
        return currentSymbol.left;
    }

    public int getColumn() {
        return currentSymbol.right;
    }

:}; 

/* Terminals (tokens returned by lexer). */
terminal CLASS, EXTENDS, PUBLIC, STATIC, VOID;
terminal STRING, NEW, RETURN, INT_TYPE;
terminal BOOLEAN_TYPE, IF, ELSE, WHILE, EQ;
terminal AND, LESSTHAN, PLUS, MINUS, MULT;
terminal LENGTH, COMMA, NOT, TRUE, FALSE, THIS;
terminal MAIN, LBRACE, RBRACE, LPAREN, RPAREN;
terminal PRINT, DOT, LBRACKET, RBRACKET, SEMICOLON;
terminal Integer INT;
terminal String ID;

non terminal Program goal;
non terminal MainClass main_class;
non terminal ClassDeclList class_declaration_list;
non terminal ClassDecl class_declaration;
non terminal ClassDeclSimple class_declaration_simple;
non terminal ClassDeclExtends class_declaration_extends;
non terminal extend;
non terminal VarDeclList var_declaration_list;
non terminal VarDecl var_declaration;
non terminal Type var_type;
non terminal MethodDeclList method_declaration_list;
non terminal MethodDecl method_declaration;
non terminal FormalList parameter_list;
non terminal Formal parameter;
non terminal StatementList statement_list;
non terminal Statement statement;
non terminal ExpList expression_list;
non terminal Exp expression;
non terminal Identifier identifier;

/* Precedence */
precedence right EQ;
precedence left AND;
precedence left LESSTHAN;
precedence left PLUS, MINUS;
precedence left MULT;
precedence right NEW;
precedence right NOT;
precedence left DOT, LBRACKET, RBRACKET, LPAREN, RPAREN;


/* The grammar */
goal ::= main_class:mc class_declaration_list:cdl 
{:
  RESULT = new Program(mc, cdl);
:}
;

main_class ::= CLASS identifier:imm LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET identifier:strname RPAREN LBRACE statement:st RBRACE RBRACE
{:
  RESULT = new MainClass(imm, strname, st);
:};


class_declaration_list ::= class_declaration_list:cdl class_declaration:cd 
{: 
  if (cdl == null) cdl = new ClassDeclList();
  cdl.addElement(cd);
  RESULT = cdl; 
:}
|
{: RESULT = new ClassDeclList();:}
;

class_declaration ::= class_declaration_simple:cds
{:RESULT = cds; :}
| class_declaration_extends:cde
{:RESULT = cde;:}
;

class_declaration_simple ::= CLASS identifier:imm LBRACE var_declaration_list: vdl method_declaration_list:mdl RBRACE
{:RESULT = new ClassDeclSimple(imm, vdl, mdl);:}
;
class_declaration_extends ::= CLASS identifier:imm extend:e LBRACE var_declaration_list: vdl method_declaration_list:mdl RBRACE
{:RESULT = new  ClassDeclExtends(imm, (Identifier)e, vdl, mdl);:}
;
extend ::= EXTENDS identifier:imm
{:RESULT = imm;:}
;

var_declaration_list ::= var_declaration_list:vdl var_declaration:vd 
{:
  if (vdl == null) vdl = new VarDeclList();
  vdl.addElement(vd);
  RESULT = vdl; 
  :}
|
{: RESULT = new VarDeclList(); :}
;

var_declaration ::= var_type:vt identifier:imm SEMICOLON 
{:RESULT = new VarDecl(vt, imm);:}
// | error SEMICOLON
;

var_type ::= BOOLEAN_TYPE 
{:RESULT = new BooleanType();:}
| INT_TYPE
{:RESULT = new IntegerType();:}
| INT_TYPE LBRACKET RBRACKET
{:RESULT = new IntArrayType();:}
| identifier:imm
{:RESULT = new IdentifierType(imm.toString());:}
;

method_declaration_list ::= method_declaration_list:mdl method_declaration:md 
{:  
  if (mdl == null) mdl = new MethodDeclList();
  mdl.addElement(md);
  RESULT = mdl; 
:}
|
{: RESULT = new MethodDeclList(); :}
;

method_declaration ::= PUBLIC var_type:vt identifier:imm LPAREN RPAREN LBRACE var_declaration_list:vdl statement_list:stl RETURN expression:e SEMICOLON RBRACE
{: 
  FormalList pl = new FormalList();
  RESULT = new MethodDecl(vt, imm, pl, vdl, stl, e);
  :}
|                      PUBLIC var_type:vt identifier:imm LPAREN parameter_list:pl RPAREN LBRACE var_declaration_list:vdl statement_list:stl RETURN expression:e SEMICOLON RBRACE
{: RESULT = new MethodDecl(vt, imm, pl, vdl, stl, e);:}
|error RBRACE
|error RPAREN LBRACE var_declaration_list:vdl statement_list:stl RETURN expression:e SEMICOLON RBRACE
;



parameter_list ::= parameter_list:pl parameter:p 
{:
  if (pl == null) pl = new FormalList();
  pl.addElement(p);
  RESULT = pl; 
:}
| 
{: RESULT = new FormalList(); :}
;

parameter ::= COMMA var_type:vt identifier:imm 
{:RESULT = new Formal(vt, imm);:}
| var_type:vt identifier:imm 
{:RESULT = new Formal(vt, imm);:}
;



statement_list ::= statement:st statement_list:stl 
{:
  if (stl == null) stl = new StatementList();
  StatementList stl2 = new StatementList();
  stl2.addElement(st);
  for (int i = 0; i < stl.size(); i++)
    stl2.addElement(stl.elementAt(i));
  RESULT = stl2; 
  :}
|
{: RESULT = new StatementList(); :}
;



statement ::= LBRACE statement_list:stl RBRACE
{: RESULT = new Block(stl); :}
| IF LPAREN expression:e RPAREN statement:s ELSE statement:s2
{: RESULT  = new If(e, s, s2); :}
| WHILE LPAREN expression:e RPAREN statement:s
{: RESULT  = new While(e, s); :} 
| PRINT LPAREN expression:e RPAREN SEMICOLON
{: RESULT  = new Print(e); :}
| identifier:imm EQ expression:e SEMICOLON
{: RESULT  = new Assign(imm, e); :}
| identifier:imm LBRACKET expression:e RBRACKET EQ expression:e2 SEMICOLON
{: RESULT  = new ArrayAssign(imm, e, e2); :}
| error SEMICOLON
;

expression_list ::= COMMA expression_list:el expression:e 
{: 
  if (el == null) el = new ExpList();
  el.addElement(e);
  RESULT = el; 
:}
|
{: RESULT = new ExpList(); :}
;

expression ::= expression:e AND expression:e1
{: RESULT = new And(e, e1); :}
|expression:e LESSTHAN expression:e1
{: RESULT = new LessThan(e, e1); :}
|expression:e PLUS expression:e1
{: RESULT = new Plus(e, e1);:}
|expression:e MINUS expression:e1
{: RESULT = new Minus(e, e1);:}
|expression:e MULT expression:e1
{: RESULT = new Times(e, e1); :}
|expression:e LBRACKET expression:e1 RBRACKET
{: RESULT = new ArrayLookup(e, e1); :}
|expression:e DOT LENGTH
{: RESULT = new ArrayLength(e); :}
|expression:e DOT identifier:imm LPAREN RPAREN
{:
    ExpList el = new ExpList();
    RESULT = new Call(e, imm, el);
:}

|expression:e DOT identifier:imm LPAREN expression:e1 expression_list:el RPAREN
{:
    ExpList el2 = new ExpList();
    el.addElement(e1);
    for (int i = 0; i < el.size(); i++)
    {
      el2.addElement(el.elementAt(i));
    }
    RESULT = new Call(e, imm, el2);
:}
| INT:imm
{:RESULT = new IntegerLiteral(imm);:}
| TRUE
{:RESULT = new True();:}
| FALSE
{:RESULT = new False();:}
| identifier:imm
{:RESULT  = new IdentifierExp(imm.toString());:}
| THIS
{:RESULT = new This();:}
| NEW INT_TYPE LBRACKET expression:e RBRACKET
{:RESULT = new NewArray(e);:}
| NEW identifier:imm LPAREN RPAREN
{:RESULT = new NewObject(imm);:}
| NOT expression:e
{: RESULT = new Not(e);:}
| LPAREN expression:e RPAREN
{: RESULT = e; :}
|LPAREN error RPAREN
;

identifier ::= ID:imm
{:RESULT = new Identifier(imm);:}
;
